trigger: none

pool:
  vmImage: ubuntu-latest

stages:
- stage: PythonCI
  jobs:
    - job: PythonLinting
      steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.10'
        displayName: 'Use Python 3.10'

      - script: |
          system_package=''
          system_package='--system-site-packages';
          echo "Installing system packages";
          python3 -m venv ${system_package} $(Build.BinariesDirectory)/venv
          source $(Build.BinariesDirectory)/venv/bin/activate
          echo "Virtual environment: ${VIRTUAL_ENV}"
          pip install -U pip setuptools wheel
        displayName: Create virtual environment

      - script: |
          source $(Build.BinariesDirectory)/venv/bin/activate
          echo "Virtual environment: ${VIRTUAL_ENV}"
          pip install pylint
          cd . && find . -type d \( -path ./.git -o -path ./dist -o -path ./builds \) -prune -o -name '*.py' -print0 | xargs -0 pylint -j 0 --disable=R0913,E0401,R0902,R0801,R0903,C0301,W0703,R1710,C0114
          exit 0
        displayName: SoftPylint
        continueOnError: true

    # - job: PythonPreDependecies
    #   steps:
    #   - checkout: git:<dependecyrepo>
    #   - bash: |
    #       # creating whl packages
    #       python setup.py bdist_wheel
    #       whl_package=$(echo dist/*.whl)
    #       echo "WHL PACKAGE: ${whl_package}"
    #     displayName: 'Creating packages from setup'
    #     target: python

    #   - task: PublishPipelineArtifact@1
    #     inputs:
    #       artifact: "PrescanBuild"
    #       targetPath: dist
    #       publishLocation: 'pipeline'
    #     displayName: 'Publishing PrescanBuild packages'

    - job: PythonDependecies
      pool:
        vmImage: ubuntu-latest
      steps:
      - script: |
          system_package=''
          system_package='--system-site-packages';
          echo "Installing system packages";
          python3 -m venv ${system_package} $(Build.BinariesDirectory)/venv
          source $(Build.BinariesDirectory)/venv/bin/activate
          echo "Virtual environment: ${VIRTUAL_ENV}"
        displayName: Create Virtual Environment

      - script: |
          source $(Build.BinariesDirectory)/venv/bin/activate
          echo "Virtual environment: ${VIRTUAL_ENV}"
          pip install -U pip setuptools wheel
        displayName: Install Dependencies

      - script: |
          source $(Build.BinariesDirectory)/venv/bin/activate
          echo "Virtual environment: ${VIRTUAL_ENV}"
          pip install -r $(Build.SourcesDirectory)/requirements.txt
        displayName: 'Install Requirements'

    - job: PythonTest
      pool:
        vmImage: ubuntu-latest
      steps:
      - task: UseDotNet@2
        displayName: ".NET 6.x"
        inputs:
          version: "6.x"
          packageType: sdk

      - task: PythonScript@0
        displayName: Prepare Pytest arguments
        inputs:
          scriptSource: inline
          script: |
            pytest_arguments = "${{ parameters.pytest_arguments }}"

            if not pytest_arguments or pytest_arguments.isspace():
              pytest_arguments = "--doctest-modules --junitxml=$(Common.TestResultsDirectory)/test_report/test-results.xml --cov=${{ parameters.source_location }} ${{ parameters.tests_location }} --cov-report=xml --cov-report=html --cov-branch --cov-report   term-missing --cov-report xml:$(Common.TestResultsDirectory)/test_report/coverage.xml "

            print("##vso[task.setvariable variable=stpl_pytest_arguments;]{}".format(pytest_arguments))

      - script: |
          source $(Build.BinariesDirectory)/venv/bin/activate
          echo "Virtual environment: ${VIRTUAL_ENV}"
          pip install pytest pytest-cov pytest-mock
          ${{ parameters.pytest_call }} ${{ parameters.tests_location }} $(stpl_pytest_arguments)
        displayName: 'Test with pytest'
        target: "${{ parameters.target }}"

      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testResultsFiles: '$(Common.TestResultsDirectory)/test_report/test-results.xml'
        condition: always()

      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage from $(Common.TestResultsDirectory)/test_report/coverage.xml'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(Common.TestResultsDirectory)/test_report/coverage.xml'
        condition: succeededOrFailed()

        # -- Publishing code coverage task requires dotnetcore SDK,seperated into a different job.
        # -- This just gets the xml to that job.
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact'
        inputs:
          PathtoPublish: '$(Common.TestResultsDirectory)'
          ArtifactName: 'codecoveragereport'
        condition: succeededOrFailed()
