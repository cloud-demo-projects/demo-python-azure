trigger: none

pool:
  vmImage: ubuntu-latest

stages:
- stage: PythonCI
  jobs:
    - job: PythonLinting
      steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.10'
        displayName: 'Use Python 3.10'

      - script: |
          system_package=''
          system_package='--system-site-packages';
          echo "Installing system packages";
          python3 -m venv ${system_package} $(Build.BinariesDirectory)/venv
          source $(Build.BinariesDirectory)/venv/bin/activate
          echo "Virtual environment: ${VIRTUAL_ENV}"
          pip install -U pip setuptools wheel
        displayName: Create virtual environment

      - script: |
          source $(Build.BinariesDirectory)/venv/bin/activate
          echo "Virtual environment: ${VIRTUAL_ENV}"
          pip install pylint
          cd . && find . -type d \( -path ./.git -o -path ./dist -o -path ./builds \) -prune -o -name '*.py' -print0 | xargs -0 pylint -j 0 --disable=R0913,E0401,R0902,R0801,R0903,C0301,W0703,R1710,C0114
          exit 0
        displayName: SoftPylint
        continueOnError: true

    # - job: PythonPreDependecies
    #   steps:
    #   - checkout: git:<dependecyrepo>
    #   - bash: |
    #       # creating whl packages
    #       python setup.py bdist_wheel
    #       whl_package=$(echo dist/*.whl)
    #       echo "WHL PACKAGE: ${whl_package}"
    #     displayName: 'Creating packages from setup'
    #     target: python

    #   - task: PublishPipelineArtifact@1
    #     inputs:
    #       artifact: "PrescanBuild"
    #       targetPath: dist
    #       publishLocation: 'pipeline'
    #     displayName: 'Publishing PrescanBuild packages'

    - job: PythonDependeciesAndTest
      pool:
        vmImage: ubuntu-latest
      steps:
      - script: |
          system_package=''
          system_package='--system-site-packages';
          echo "Installing system packages";
          python3 -m venv ${system_package} $(Build.BinariesDirectory)/venv
          source $(Build.BinariesDirectory)/venv/bin/activate
          echo "Virtual environment: ${VIRTUAL_ENV}"
        displayName: Create Virtual Environment

      - script: |
          source $(Build.BinariesDirectory)/venv/bin/activate
          echo "Virtual environment: ${VIRTUAL_ENV}"
          pip install -U pip setuptools wheel
        displayName: Install Dependencies

      - script: |
          source $(Build.BinariesDirectory)/venv/bin/activate
          echo "Virtual environment: ${VIRTUAL_ENV}"
          pip install -r $(Build.SourcesDirectory)/requirements.txt
        displayName: 'Install Requirements'

      - task: UseDotNet@2
        displayName: ".NET 6.x"
        inputs:
          version: "6.x"
          packageType: sdk

      - script: |
          source $(Build.BinariesDirectory)/venv/bin/activate
          echo "Virtual environment: ${VIRTUAL_ENV}"
          pip install pytest pytest-azurepipelines
          pip install pytest-cov
          pytest --doctest-modules --junitxml=junit/test-results.xml --cov=. --cov-report=xml
        displayName: 'Test with pytest'

      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testResultsFiles: '$(Common.TestResultsDirectory)/test_report/test-results.xml'
        condition: always()

      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage from $(Common.TestResultsDirectory)/test_report/coverage.xml'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(Common.TestResultsDirectory)/test_report/coverage.xml'
        condition: succeededOrFailed()

        # -- Publishing code coverage task requires dotnetcore SDK,seperated into a different job.
        # -- This just gets the xml to that job.
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact'
        inputs:
          PathtoPublish: '$(Common.TestResultsDirectory)'
          ArtifactName: 'codecoveragereport'
        condition: succeededOrFailed()

    - job: SonarQubeScan
      # TODO

    - job: NexusLCScan
      # TODO

    - job: FortifyScan
      # TODO

    - job: PackageAndPublish
      pool:
        vmImage: ubuntu-latest
      steps:
      - script: |
          system_package=''
          system_package='--system-site-packages';
          echo "Installing system packages";
          python3 -m venv ${system_package} $(Build.BinariesDirectory)/venv
          source $(Build.BinariesDirectory)/venv/bin/activate
          echo "Virtual environment: ${VIRTUAL_ENV}"
        displayName: Create Virtual Environment
        
       - script: |
    source $(Build.BinariesDirectory)/venv/bin/activate
    echo "Virtual environment: ${VIRTUAL_ENV}"

    # creating tgz and whl packages in $dist_folder
    python setup.py sdist --dist-dir ${{ parameters.dist_folder }}
    python setup.py bdist_wheel --dist-dir ${{ parameters.dist_folder }}

    # check if the operation went well or that we should generate errormessage
    if [ $? != 0 ];
    then
      echo "##vso[task.logissue type=error]check your python setup.py configuration, because it failed creating tgz/whl package!"
      echo "##vso[task.complete result=Failed]Creation of tgz/whl packages failed"
      exit 0
    fi;

    python_package=$(ls -al ${{ parameters.dist_folder }}/${{ parameters.azure_artifact_extension }})
    echo "PACKAGE: ${python_package}"

    pip install -U twine
  displayName: 'Creating packages from setup'
  target: "${{ parameters.target }}"
  
  - task: PublishBuildArtifacts@1
  inputs:
    artifactName: ${{ parameters.artifact_name }}
    pathToPublish: ${{ parameters.dist_folder }}
    publishLocation: 'Container'
  displayName: 'Publishing scanned packages'
  target: "${{ parameters.target }}"
  
  - script: |
    source $(Build.BinariesDirectory)/venv/bin/activate
    echo "Virtual environment: ${VIRTUAL_ENV}"
    twine upload -r "<feed or service connection name>" --config-file $(PYPIRC_PATH) <package path/files>
  displayName: 'Publish package to Azure Artifacts'
  condition: and(succeeded(), eq(${{ parameters.publish_to_artifacts }}, true))
  target: "${{ parameters.target }}"
